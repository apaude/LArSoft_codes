#include "services_dune.fcl"
#include "CRT.fcl"
##include "hitfindermodules_dune.fcl"
##include "filters.fcl"
##include "ProtoDUNEUnstableHVFilter.fcl"
#include "signalservices_dune.fcl"
##include "caldata_dune.fcl"
##include "trackfindermodules_dune.fcl"
##include "ecalibration.fcl"
##include "triggeralgo_service.fcl"
##include "photpropservices_dune.fcl"
##include "ProtoDUNEDataUtils.fcl"
##include "ProtoDUNEFembFilter.fcl"


process_name: BeamPDS

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "BeamPDS.root" }
  RandomNumberGenerator: {}                     #ART native random number generator
  @table::protodune_services
  message:      @local::standard_info
  FileCatalogMetadata: @local::art_file_catalog_mc
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}
physics:
{
 producers:{

  }
filters:  
 {
#  filter:   @local::pdsp_fembfilter_all
f1: @local::HVfilter
   } 
   fpath: [f1]
 analyzers:{
   BeamPDS:
   {
   module_type: "BeamPDS"
   DataUtils: @local::standard_protodunedatautils
  }	   
 }
 

ana:  [ BeamPDS ]
 end_paths:     [  ana ] 
}

# define the list of LArSoft modules to run through the simulate path


physics.analyzers.BeamPDS.TrackModuleLabel:        "pandoraTrack"
physics.analyzers.BeamPDS.CalorimetryModuleLabel:  "pandoracalo"
physics.analyzers.BeamPDS.HitsModuleLabel:         "hitpdune"
physics.analyzers.BeamPDS.SaveTrackInfo:           true
physics.analyzers.BeamPDS.DataUtils.RawDigitTag:   "caldata:dataprep"
physics.analyzers.BeamPDS.SelectEvents: [fpath]
services.PdspChannelMapService:        @local::pdspchannelmap
